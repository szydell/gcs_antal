name: Dynamic Analysis

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  # Enable manual triggering
  workflow_dispatch:
  # Run monthly to ensure ongoing testing
  schedule:
    - cron: '0 0 1 * *'

jobs:
  go-fuzz:
    name: Go Fuzzing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Install go-fuzz dependencies
        run: |
          go install github.com/dvyukov/go-fuzz/go-fuzz@latest
          go install github.com/dvyukov/go-fuzz/go-fuzz-build@latest

      - name: Build fuzz targets
        run: |
          mkdir -p fuzz/corpus
          # Add small sample inputs to start the fuzzing process
          echo '{"server_id":"NA123","bearer_token":"glpat-test"}' > fuzz/corpus/auth1.json
          echo '{"server_id":"","bearer_token":""}' > fuzz/corpus/auth2.json
          go-fuzz-build -o fuzz/auth.zip ./internal/auth

      - name: Run fuzzing
        run: |
          # Run fuzzing for a fixed time (5 minutes per target to avoid excessive CI time)
          go-fuzz -bin=fuzz/auth.zip -corpus=fuzz/corpus -workdir=fuzz/workdir -timeout=20 -max_total_time=300

      - name: Archive fuzzing artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fuzz-findings
          path: |
            fuzz/workdir/crashers
            fuzz/workdir/suppressions

  api-security-scan:
    name: API Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Create mock config for testing
        run: |
          cat > config.test.yaml << EOF
          server:
            host: "127.0.0.1"
            port: 8080
          gitlab:
            url: "http://localhost:8081"
            timeout: 2
          nats:
            url: "nats://localhost:4222"
            user: "test"
            pass: "test"
            audience: "TEST"
            issuer_seed: "SAANL5L6RLDL4T5VTKQSK756ZJBRET7JGSA3QNMJ6B4AKJTUHBFUMCPR"
            permissions:
              publish:
                allow: ["test.>"]
              subscribe:
                allow: ["test.>"]
          logging:
            level: "info"
          EOF

      - name: Set up mock GitLab API server
        run: |
          cat > mock_gitlab.go << EOF
          package main
          
          import (
              "log"
              "net/http"
          )
          
          func main() {
              http.HandleFunc("/api/v4/user", func(w http.ResponseWriter, r *http.Request) {
                  auth := r.Header.Get("PRIVATE-TOKEN")
                  if auth == "valid-token" {
                      w.WriteHeader(http.StatusOK)
                      w.Write([]byte('{"id":1,"username":"testuser","name":"Test User"}'))
                  } else {
                      w.WriteHeader(http.StatusUnauthorized)
                      w.Write([]byte('{"message":"401 Unauthorized"}'))
                  }
              })
              
              log.Fatal(http.ListenAndServe(":8081", nil))
          }
          EOF
          
          go build -o mock_gitlab mock_gitlab.go
          ./mock_gitlab &

      - name: Build and start the application
        run: |
          go build -o gcs_antal
          ./gcs_antal --config config.test.yaml &
          sleep 5 # Give the application time to start

      - name: Test API endpoints
        run: |
          # Test health endpoint
          HEALTH_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
          if [ "$HEALTH_CODE" -ne 200 ]; then
            echo "Health endpoint returned $HEALTH_CODE, expected 200"
            exit 1
          fi
          
          # Test metrics endpoint
          METRICS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/metrics)
          if [ "$METRICS_CODE" -ne 200 ]; then
            echo "Metrics endpoint returned $METRICS_CODE, expected 200"
            exit 1
          fi

      - name: Install OWASP ZAP
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.github/zap-rules.tsv'
          cmd_options: '-a'

  code-coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage levels
        run: |
          go tool cover -func=coverage.out
          
          # Extract the total coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "Total coverage: $COVERAGE%"
          
          # Fail if coverage is below 80%
          if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
            echo "Code coverage is below 80%. Please add more tests."
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Scan dependencies with govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-fuzz, api-security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Set up NATS server
        run: |
          # Install NATS server
          go install github.com/nats-io/nats-server/v2@latest
          # Start NATS server with basic configuration
          nats-server -js -DV &
          sleep 2

      - name: Run integration tests
        run: |
          # Create a special tag for integration tests
          go test -tags=integration -v ./... -run TestIntegration

      - name: Verify NATS connectivity
        run: |
          # Install NATS CLI
          go install github.com/nats-io/natscli/nats@latest
          
          # Test basic NATS connectivity
          nats server check connection