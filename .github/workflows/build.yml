name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Update coverage badge
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Run Test
        run: |
          go test -v ./... -covermode=count -coverprofile=coverage.out
          go tool cover -func=coverage.out -o=coverage.out

      - name: Go Coverage Badge  # Pass the `coverage.out` output to this action
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.head_ref }}

      - name: Run go vet
        run: go vet ./...

  #      - name: Verify minimum coverage
  #        run: |
  #          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
  #          echo "Total coverage: $COVERAGE%"
  #          if (( $(echo "$COVERAGE < 70.0" | bc -l) )); then
  #            echo "Code coverage is below 70%. Please add more tests."
  #            exit 1
  #          fi

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: [unit-tests]
    permissions:
      contents: read
    strategy:
      matrix:
        arch: [amd64, arm64]
      fail-fast: false  # Continue with another arch if one fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Determine version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then  
            VERSION=${GITHUB_REF#refs/tags/}  
          else  
            VERSION="v0.0.0-build.${{ github.run_number }}"  
          fi  
          echo "VERSION=$VERSION" >> $GITHUB_ENV  
          echo "version=$VERSION" >> $GITHUB_OUTPUT  

      - name: Build binary
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags "-X main.version=${{ env.VERSION }}" -o gcs_antal-linux-${{ matrix.arch }} .  

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gcs_antal-linux-${{ matrix.arch }}
          path: gcs_antal-linux-${{ matrix.arch }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: ls -la */

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: GCS Antal ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            gcs_antal-linux-amd64/gcs_antal-linux-amd64  
            gcs_antal-linux-arm64/gcs_antal-linux-arm64