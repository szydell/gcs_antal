name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true
          
      - name: Run tests
        run: go test -v ./...
        
      - name: Run go vet
        run: go vet ./...

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: [unit-tests]
    permissions:
      contents: read
    strategy:
      matrix:
        arch: [amd64, arm64]
      fail-fast: false  # Continue with other arch if one fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Determine version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v0.0.0-build.${{ github.run_number }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build binary
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags "-X main.version=${{ env.VERSION }}" -o gcs_antal-linux-${{ matrix.arch }} .
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gcs_antal-linux-${{ matrix.arch }}
          path: gcs_antal-linux-${{ matrix.arch }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List artifacts
        run: ls -la */
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: GCS Antal ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            gcs_antal-linux-amd64/gcs_antal-linux-amd64
            gcs_antal-linux-arm64/gcs_antal-linux-arm64

  deploy:
    name: Deploy to Production Server
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: read
    steps:
      - name: Download amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: gcs_antal-linux-amd64
          path: ./
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANTAL_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H n1.gcs.sgw.equipment >> ~/.ssh/known_hosts
        
      - name: Deploy binary to server
        run: |
          scp gcs_antal-linux-amd64 antal@n1.gcs.sgw.equipment:~/
          
      - name: Install and restart service
        run: |
          ssh antal@n1.gcs.sgw.equipment '
            sudo /bin/mv /home/antal/gcs_antal-linux-amd64 /usr/local/bin/gcs_antal-linux-amd64 &&
            sudo /bin/systemctl restart gcs_antal.service
          '
          
      - name: Verify service is running
        run: |
          ssh antal@n1.gcs.sgw.equipment 'systemctl is-active --quiet gcs_antal.service && echo "Service is running successfully"'
          
      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/id_ed25519